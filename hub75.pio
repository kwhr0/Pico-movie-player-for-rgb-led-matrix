;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program hub75_row

; side-set pin 0 is LATCH
; side-set pin 1 is OEn
; OUT pins are row select A-E
;
; Each FIFO record consists of:
; - 5-bit row select (LSBs)
; - Pulse width - 1 (27 MSBs)
;
; Repeatedly select a row, pulse LATCH, and generate a pulse of a certain
; width on OEn.

.side_set 2 ; OEn LATCH

.wrap_target
	out pins, 5        side 0b10 ; Deassert OEn, output row select
	out x, 27 [1]      side 0b11 ; Pulse LATCH, get OEn pulse width
pulse_loop:
	jmp x-- pulse_loop side 0b00 ; Assert OEn for x+1 cycles
.wrap

% c-sdk {
static inline void hub75_row_program_init(PIO pio, uint sm) {
	uint row_pins = 10, latch_pins = 8;
	uint offset = pio_add_program(pio, &hub75_row_program);

	pio_sm_set_consecutive_pindirs(pio, sm, row_pins, 5, true);
	pio_sm_set_consecutive_pindirs(pio, sm, latch_pins, 2, true);
	for (uint i = row_pins; i < row_pins + 5; i++)
		pio_gpio_init(pio, i);
	pio_gpio_init(pio, latch_pins);
	pio_gpio_init(pio, latch_pins + 1);

	pio_sm_config c = hub75_row_program_get_default_config(offset);
	sm_config_set_out_pins(&c, row_pins, 5);
	sm_config_set_sideset_pins(&c, latch_pins);
	sm_config_set_out_shift(&c, true, true, 32); // shift right, autopull

	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}
%}

.program hub75_rgb
.side_set 1 ; CLK
.wrap_target
public shift:
	pull             side 0 ; gets patched to `out null, n` if n nonzero (otherwise the PULL is required for fencing)
	out pins, 6      side 0
	out null, 32 [1] side 1 ; Discard remainder of OSR contents
.wrap

% c-sdk {
static uint rgb_offset;
static inline void hub75_rgb_program_init(PIO pio, uint sm) {
	uint rgb_pins = 15, clock_pin = 21;
	rgb_offset = pio_add_program(pio, &hub75_rgb_program);

	pio_sm_set_consecutive_pindirs(pio, sm, rgb_pins, 6, true);
	pio_sm_set_consecutive_pindirs(pio, sm, clock_pin, 1, true);
	for (uint i = rgb_pins; i < rgb_pins + 6; ++i)
		pio_gpio_init(pio, i);
	pio_gpio_init(pio, clock_pin);

	pio_sm_config c = hub75_rgb_program_get_default_config(rgb_offset);
	sm_config_set_out_pins(&c, rgb_pins, 6);
	sm_config_set_sideset_pins(&c, clock_pin);
	sm_config_set_out_shift(&c, true, true, 32); // shift right, autopull
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

	pio_sm_init(pio, sm, rgb_offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

// Patch a data program at `offset` to preshift pixels by `shamt`
static inline void hub75_rgb_set_shift(PIO pio, uint sm, uint shamt) {
	pio->instr_mem[rgb_offset + hub75_rgb_offset_shift] = shamt ? pio_encode_out(pio_null, shamt) : pio_encode_pull(false, true);
}
%}
