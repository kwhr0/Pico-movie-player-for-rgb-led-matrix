;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; 32-bit format, valid left channel only

.program i2s
.side_set 2 ; LRCLK BCLK
.wrap_target
	set x, 30        side 0b01
bitloop0:
	out pins, 1      side 0b00
	jmp x-- bitloop0 side 0b01
	out pins, 1      side 0b10
	set x, 30        side 0b11
bitloop1:
	set pins, 0      side 0b10
	jmp x-- bitloop1 side 0b11
	set pins, 0      side 0b00
.wrap

% c-sdk {
#include <hardware/clocks.h>

#define FS	32000

static inline void i2s_program_init(PIO pio, uint sm) {
	uint data_pin = 22, clock_pins = 6;
	uint offset = pio_add_program(pio, &i2s_program);

	pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
	pio_sm_set_consecutive_pindirs(pio, sm, clock_pins, 2, true);
	pio_gpio_init(pio, data_pin);
	pio_gpio_init(pio, clock_pins);
	pio_gpio_init(pio, clock_pins + 1);

	pio_sm_config c = i2s_program_get_default_config(offset);
	sm_config_set_out_pins(&c, data_pin, 1);
	sm_config_set_set_pins(&c, data_pin, 1);
	sm_config_set_sideset_pins(&c, clock_pins);
	sm_config_set_out_shift(&c, false, true, 32); // shift left, auto pull
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
	sm_config_set_clkdiv(&c, (float)clock_get_hz(clk_sys) / (64 * FS) / 2);

	pio_sm_init(pio, sm, offset, &c);
}
%}
